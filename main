import json
import os
from datetime import datetime

# Define the file path for tasks.json
TASKS_FILE = 'tasks.json'
full_path = os.path.join(os.getcwd(), TASKS_FILE)

# --- Helper Functions for File I/O ---

def read_tasks():
    """Reads tasks from the tasks.json file.
    Returns an empty list if the file doesn't exist or is empty."""
    if not os.path.isfile(full_path):
        return []  # Return empty list if file doesn't exist
    try:
        with open(full_path, 'r') as f:
            content = f.read()
            if not content:
                return [] # Return empty list if file is empty
            return json.loads(content)
    except json.JSONDecodeError:
        # Handle cases where the file is corrupted or not valid JSON
        return []

def write_tasks(tasks):
    """Writes the list of tasks to the tasks.json file."""
    with open(full_path, 'w') as f:
        # Use indent=4 for a human-readable file
        json.dump(tasks, f, indent=4)

# --- Command Processing ---

def process_command(command):
    """Parses and executes a command."""
    parts = command.strip().split()
    if not parts:
        return ""  # Return nothing if input is empty

    cmd = parts[0].lower()
    args = parts[1:]
    
    # Read all tasks from the file at the start
    tasks = read_tasks()

    if cmd == "add":
        if not args:
            return "Error: Please provide a task description to add."
        
        description = " ".join(args)
        
        # Determine the new ID by finding the max existing ID and adding 1
        new_id = max([task.get('id', 0) for task in tasks] or [0]) + 1
        
        new_task = {
            "id": new_id,
            "description": description,
            "status": "todo",
            # Convert datetime to string for JSON compatibility
            "createdAt": datetime.now().isoformat(),
            "updatedAt": datetime.now().isoformat()
        }
        
        tasks.append(new_task)
        write_tasks(tasks) # Save the updated list back to the file
        return f"✅ Task added successfully (ID: {new_id})"

    elif cmd == "update":
        if len(args) < 2:
            return "Usage: update <id> <new description>"
        
        try:
            task_id = int(args[0])
        except ValueError:
            return "Error: Invalid ID. Please provide a number."
            
        new_description = " ".join(args[1:])
        
        task_found = False
        for task in tasks:
            if task.get("id") == task_id:
                task["description"] = new_description
                task["updatedAt"] = datetime.now().isoformat()
                task_found = True
                break
        
        if task_found:
            write_tasks(tasks) # Save the changes to the file
            return f"🔄 Task {task_id} updated successfully."
        else:
            return f"❌ Error: Task with ID {task_id} not found."

    return f"Unknown command: '{cmd}'. Available commands: add, update, exit."

# --- Main Application Loop ---

def main():
    """Main function to run the interactive CLI session."""
    print("Task Manager - Riordan McKenna")
    print("Enter 'exit' to end the session.")
    
    # Initial check to notify user if a new file will be created
    if not os.path.isfile(full_path):
        print("No tasks.json file found. A new one will be created upon adding a task.")

    while True:
        raw_input = input(">> ")
        
        if raw_input.lower() == 'exit':
            print("Ending session. Goodbye! 👋")
            break
            
        result = process_command(raw_input)
        if result: # Only print if there is a result
            print(result)

if __name__ == "__main__":
    main()